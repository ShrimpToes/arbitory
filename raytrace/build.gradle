import org.gradle.internal.jvm.Jvm

plugins {
    id 'java-library'
    id 'c'
}

apply plugin: 'java-library'
apply plugin: 'c'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-cuda"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl:3.3.0"
    runtimeOnly "org.lwjgl:lwjgl-assimp:3.3.0"
    runtimeOnly "org.lwjgl:lwjgl-cuda:3.3.0"

}

task cleanCUDA(type:Exec) {
    workingDir '/lib'
    commandLine 'cmd', '/c', 'del', '*.dll', '*.exp', '*.lib', '*.o'
}

task compileCUDA(type:Exec) {
    workingDir '/src/cuda'
    //commandLine 'cmd', '/c', 'build.bat'
    commandLine 'nvcc',
            '-I', '\"C:\\Program Files\\Java\\jdk-17.0.2\\include\"',
            '-I', '\"C:\\Program Files\\Java\\jdk-17.0.2\\include\\win32\"',
            'squid_raytrace_Raytrace.cu',
            '-o', '../../lib/raytrace.dll',
            '--shared'
    ext.output = {
        return standardOutput.toString()
    }
}

compileCUDA.dependsOn cleanCUDA

test {
    systemProperty "java.library.path", "${projectDir}\\lib"
    jvmArgs '-Xms4000m', '-Xmx4000m'
}

test.dependsOn compileCUDA

test {
    useJUnitPlatform()
}